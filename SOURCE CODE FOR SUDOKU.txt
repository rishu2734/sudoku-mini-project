\\sudoku generator class
package GAME;

import java.lang.*; 

public class SUDOKU {
	 
    int[] mat[]; 
    int N; // number of columns/rows. 
    int SRN; // square root of N 
    int K; // No. Of missing digits 
  
    // Constructor 
    SUDOKU(int N, int K) 
    { 
        this.N = N; 
        this.K = K; 
  
        // Compute square root of N 
        Double SRNd = Math.sqrt(N); 
        SRN = SRNd.intValue(); 
  
        mat = new int[N][N]; 
    } 
  
    // Sudoku Generator 
    public void fillValues() 
    { 
        // Fill the diagonal of SRN x SRN matrices 
        fillDiagonal(); 
  
        // Fill remaining blocks 
        fillRemaining(0, SRN); 
  
        // Remove Randomly K digits to make game 
        removeKDigits(); 
    } 
  
    // Fill the diagonal SRN number of SRN x SRN matrices 
    void fillDiagonal() 
    { 
  
        for (int i = 0; i<N; i=i+SRN) 
  
            // for diagonal box, start coordinates->i==j 
            fillBox(i, i); 
    } 
  
    // Returns false if given 3 x 3 block contains num. 
    boolean unUsedInBox(int rowStart, int colStart, int num) 
    { 
        for (int i = 0; i<SRN; i++) 
            for (int j = 0; j<SRN; j++) 
                if (mat[rowStart+i][colStart+j]==num) 
                    return false; 
  
        return true; 
    } 
  
    // Fill a 3 x 3 matrix. 
    void fillBox(int row,int col) 
    { 
        int num; 
        for (int i=0; i<SRN; i++) 
        { 
            for (int j=0; j<SRN; j++) 
            { 
                do
                { 
                    num = randomGenerator(N); 
                } 
                while (!unUsedInBox(row, col, num)); 
  
                mat[row+i][col+j] = num; 
            } 
        } 
    } 
  
    // Random generator 
    int randomGenerator(int num) 
    { 
        return (int) Math.floor((Math.random()*num+1)); 
    } 
  
    // Check if safe to put in cell 
    boolean CheckIfSafe(int i,int j,int num) 
    { 
        return (unUsedInRow(i, num) && 
                unUsedInCol(j, num) && 
                unUsedInBox(i-i%SRN, j-j%SRN, num)); 
    } 
  
    // check in the row for existence 
    boolean unUsedInRow(int i,int num) 
    { 
        for (int j = 0; j<N; j++) 
           if (mat[i][j] == num) 
                return false; 
        return true; 
    } 
  
    // check in the row for existence 
    boolean unUsedInCol(int j,int num) 
    { 
        for (int i = 0; i<N; i++) 
            if (mat[i][j] == num) 
                return false; 
        return true; 
    } 
  
    // A recursive function to fill remaining  
    // matrix 
    boolean fillRemaining(int i, int j) 
    { 
        //  System.out.println(i+" "+j); 
        if (j>=N && i<N-1) 
        { 
            i = i + 1; 
            j = 0; 
        } 
        if (i>=N && j>=N) 
            return true; 
  
        if (i < SRN) 
        { 
            if (j < SRN) 
                j = SRN; 
        } 
        else if (i < N-SRN) 
        { 
            if (j==(int)(i/SRN)*SRN) 
                j =  j + SRN; 
        } 
        else
        { 
            if (j == N-SRN) 
            { 
                i = i + 1; 
                j = 0; 
                if (i>=N) 
                    return true; 
            } 
        } 
  
        for (int num = 1; num<=N; num++) 
        { 
            if (CheckIfSafe(i, j, num)) 
            { 
                mat[i][j] = num; 
                if (fillRemaining(i, j+1)) 
                    return true; 
  
                mat[i][j] = 0; 
            } 
        } 
        return false; 
    } 
  
    // Remove the K no. of digits to 
    // complete game 
    public void removeKDigits() 
    { 
        int count = K; 
        while (count != 0) 
        { 
            int cellId = randomGenerator(N*N); 
  
            // System.out.println(cellId); 
            // extract coordinates i  and j 
            int i = (cellId/N); 
            int j = cellId%9; 
            if (j != 0) 
                j = j - 1; 
  
            // System.out.println(i+" "+j); 
            if (mat[i][j] != 0) 
            { 
                count--; 
                mat[i][j] = 0; 
            } 
        } 
    } 
  
    // Print sudoku 
    public void printSudoku() 
    { 
        for (int i = 0; i<N; i++) 
        { 
            for (int j = 0; j<N; j++) 
                System.out.print(mat[i][j] + " "); 
            System.out.println(); 
        } 
        System.out.println(); 
    } 
}





\\SUDOKU GENERTOR MAIN CLASS
package GAME;

public class TESTSUDOKU {
	// Driver code 
    public static void main(String[] args) 
    { 
        int N = 9, K = 20; 
        SUDOKU sudoku = new SUDOKU(N, K); 
        sudoku.fillValues(); 
        sudoku.printSudoku(); 
    } 
	
}




\\SUDUKO SOLVER CLASS WITH ITS MAIN CLASS
package sudokoo;

public class SOLVER {
	// we define a simple grid to solve. Grid is stored in a 2D Array
		public static int[][] GRID_TO_SOLVE = {
				{9,0,0,1,0,0,0,0,5},
				{0,0,5,0,9,0,2,0,1},
				{8,0,0,0,4,0,0,0,0},
				{0,0,0,0,8,0,0,0,0},
				{0,0,0,7,0,0,0,0,0},
				{0,0,0,0,2,6,0,0,9},
				{2,0,0,3,0,0,0,0,6},
				{0,0,0,2,0,0,9,0,0},
				{0,0,1,9,0,4,5,7,0},
		};
		
		private int[][] board;
		public static final int EMPTY = 0; // empty cell
		public static final int SIZE = 9; // size of our Sudoku grids
		
		public SOLVER(int[][] board) {
			this.board = new int[SIZE][SIZE];
			
			for (int i = 0; i < SIZE; i++) {
				for (int j = 0; j < SIZE; j++) {
					this.board[i][j] = board[i][j];
				}
			}
		}
		
		// we check if a possible number is already in a row
		private boolean isInRow(int row, int number) {
			for (int i = 0; i < SIZE; i++)
				if (board[row][i] == number)
					return true;
			
			return false;
		}
		
		// we check if a possible number is already in a column
		private boolean isInCol(int col, int number) {
			for (int i = 0; i < SIZE; i++)
				if (board[i][col] == number)
					return true;
			
			return false;
		}
		
		// we check if a possible number is in its 3x3 box
		private boolean isInBox(int row, int col, int number) {
			int r = row - row % 3;
			int c = col - col % 3;
			
			for (int i = r; i < r + 3; i++)
				for (int j = c; j < c + 3; j++)
					if (board[i][j] == number)
						return true;
			
			return false;
		}
		
		// combined method to check if a number possible to a row,col position is ok
		private boolean isOk(int row, int col, int number) {
			return !isInRow(row, number)  &&  !isInCol(col, number)  &&  !isInBox(row, col, number);
		}
		
		// Solve method. We will use a recursive BackTracking algorithm.
		// we will see better approaches in next video :)
	       public boolean solve() {
	        for (int row = 0; row < SIZE; row++) {
	         for (int col = 0; col < SIZE; col++) {
	          // we search an empty cell
	          if (board[row][col] == EMPTY) {
	            // we try possible numbers
	            for (int number = 1; number <= SIZE; number++) {
	              if (isOk(row, col, number)) {
	                // number ok. it respects sudoku constraints
	                board[row][col] = number;

	                if (solve()) { // we start backtracking recursively
	                  return true;
	                } else { // if not a solution, we empty the cell and we continue
	                  board[row][col] = EMPTY;
	                }
	             }
	            }

	            return false; // we return false
	           }
	          }
	         }

	         return true; // sudoku solved
		}
		
		public void display() {
			for (int i = 0; i < SIZE; i++) {
				for (int j = 0; j < SIZE; j++) {
					System.out.print(" " + board[i][j]);
				}
			
				System.out.println();
			}
			
			System.out.println();
		}
		public static void main(String[] args) {
			SOLVER sudoku = new SOLVER(GRID_TO_SOLVE);
			System.out.println("Sudoku grid to solve");
			sudoku.display();
			
			// we try resolution
			if (sudoku.solve()) {
				System.out.println("Sudoku Grid solved with simple BT");
				sudoku.display();
			} else {
				System.out.println("Unsolvable");
			}
		}
}